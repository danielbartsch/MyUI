#! /bin/sh

alias gmd="git merge develop"
alias gmu="gd;pb;gmd"

function new {
  git branch "$@"
  git checkout "$1"
}
alias pull="git pull"
alias push="git push"

# alias to fix common accidental 'close less pager and then do a git status'
alias qgs="clear; git status"

alias gd="git checkout develop; git pull"

# git diff
alias gdf="git diff --ignore-space-change --color-moved --patch-with-stat"

# git diff, but staged files
alias gcdf="git diff --staged --ignore-space-change --color-moved --patch-with-stat"

# git diff, but n previous commits
function gdfn { git diff HEAD~"$@" HEAD --ignore-space-change --color-moved --patch-with-stat; }

# Log commands to files when git status (gs) is called
export LOG_COMMANDS_TO_FILE=0

#git status + command history
function gs {
  clear;
  git status;
  if [ $LOG_COMMANDS_TO_FILE -eq 1 ]; then
    printf "Amount of Commands: " > /home/danielbartsch/commandsPerDay/"$(date +%Y-%m-%d)";
    history | grep -c "$(date +%d.%m.%Y)" >> /home/danielbartsch/commandsPerDay/"$(date +%Y-%m-%d)";
    printf "\nCommands: \n" >> /home/danielbartsch/commandsPerDay/"$(date +%Y-%m-%d)";
    history | grep "$(date +%d.%m.%Y)" >> /home/danielbartsch/commandsPerDay/"$(date +%Y-%m-%d)";
  fi
}

# git add + git add all
function gadd {
  clear;
  if [ -z $@ ]; then
    git add $(git rev-parse --show-toplevel);
  else
    git add "$@";
  fi
  git status;
}

# git commit prepared for message
function gc { git commit -m "$@"; git status; }

# git commit prepared for message ignoring evaluation
function gcn { git commit -mn "$@"; git status; }

# git history of a file
alias gh="git log -p"

# blame a file by every line
function blame {
  git blame -s $@ | grep -E ".*[0-9]+\)"
}

# discarding unstaged file changes
function discard {
  read -p "Are you sure you want to delete all unstaged changes? (y/n)" -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    if [ -z $@ ]; then
      git checkout -- $(git rev-parse --show-toplevel);
    else
      git checkout -- "$@";
    fi
    git status;
  fi
}

# n commits to staged
function cts {
  clear;
  if [ -z $@ ]; then
    git reset --soft HEAD~1
  else
    git reset --soft HEAD~$@
  fi
  git status;
}

# switch to branch with grep search of all branches (only works with branches you've already been on)
function to {
  branches=$(git branch --no-color | grep "$@")
  git checkout ${branches[0]};
  git pull;
}

# git diff of one commit
function gdfc {
  git diff $@^ $@ --ignore-space-change --color-moved --patch-with-stat;
}

# git diff of current branch with specified base branch (default is develop)
function gdfb {
  if [ -z $@ ]; then
    git diff `git merge-base $(git rev-parse --abbrev-ref HEAD) develop` --ignore-space-change --color-moved --patch-with-stat;
  else
    git diff `git merge-base $(git rev-parse --abbrev-ref HEAD) $1` --ignore-space-change --color-moved --patch-with-stat $2;
  fi
}

# go to n-th previous branch or direct previous branch
function pb {
  if [ -z $@ ]; then
    git checkout @{-1}
  else
    git checkout @{-$@}
  fi
  git pull;
}

# show previous n branches or direct previous branch
function spb {
  if [ -z $@ ]; then
    git reflog | egrep -io "moving from ([^[:space:]]+)" | awk '{ print $3 }' | awk ' !x[$0]++' | head -n1;
  else
    git reflog | egrep -io "moving from ([^[:space:]]+)" | awk '{ print $3 }' | awk ' !x[$0]++' | head -n$@;
  fi
}

# removing specified files or folders from staged area
function unstage {
  clear;
  if [ -z $@ ]; then
    git reset -- $(git rev-parse --show-toplevel);
  else
    git reset -- "$@";
  fi
  git status;                  
}

# go to next commit
function gnc {
  git log --reverse --pretty=%H master | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout
}

# go to previous commit
function gpc {
  git checkout HEAD^1
}

# show last n commit messages
function cms {
    clear;
    git status;
    printf "\n"
    if [ -z $@ ]; then
        #git log -1 --pretty=format:"%h %an %s";
        git log -1 --pretty=format:"%h %s";
    else
        #git log -"$@" --pretty=format:"%h %an %s";
        git log -"$@" --pretty=format:"%h %s";
    fi
}

# copy last n commit hashes to clipboard
function ccms {
  if [ -z $@ ]; then
    messages=$(git log -1 --pretty=format:"%h");
  else
    messages=$(git log -"$@" --pretty=format:"%h");
  fi
  echo "$messages" | xclip -selection c;
}

# copy current branch name to clipboard
function ccb {
  echo -e "$(git symbolic-ref --quiet --short HEAD 2> /dev/null || git rev-parse --short HEAD 2> /dev/null || echo '(unknown)')" | xclip -selection c
}

# git stash pop (last or specified number)
function pop {
  clear;
  if [ -z $@ ]; then
    git stash pop;
  else
    git stash pop stash@{$@};
  fi
}

# git stash pop (last or specified number) + file/path
function popf {
  clear;
  if [ -z $@ ]; then
    git stash pop;
  else
    if [[ ${1} =~ ^[0-9]+$ ]]; then
      # has no second parameter (no file/path)
      if [ -z ${2} ]; then
        git stash pop stash@{$@};
      else
        git diff stash@{${1}}^1 stash@{${1}} -- ${2} | git apply
      fi
    else
      git diff stash@{0}^1 stash@{0} -- $@ | git apply
    fi
  fi
}

# git stash
function stash {
  clear;
  if [ -z $@ ]; then
    git stash;
  else
    git stash save "$@";
  fi
  git status;
}

# git stash file/path
function stashf {
  clear;
  if [ -z $@ ]; then
    git stash;
  else
    git stash push --include-untracked -- $@;
  fi
  git status;
}

alias stashlist="clear; git status; git stash list"

# view diff of HEAD and content of last or specified stash
function viewstash {
  if [ -z $@ ]; then
    git stash show -p --ignore-space-change --color-moved --patch-with-stat;
  else
    git stash show -p stash@{$@} --ignore-space-change --color-moved --patch-with-stat;
  fi
}

# drop stash (last or specified)
function dropstash {
  if [ -z $@ ]; then
    git stash drop;
  else
    git stash drop stash@{$@};
  fi
}
